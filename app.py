import streamlit as st
from pathlib import Path
import os
from io import BytesIO
from docx import Document
from docx.oxml.ns import qn
from docx.oxml import OxmlElement

# Base directory for locating the blank template
BASE_DIR = Path(__file__).parent
TEMPLATE_PATH = BASE_DIR / 'blank.docx'

st.set_page_config(page_title="XML to DOCX Highlighter", layout="wide")
st.title("XML to DOCX Batch Highlighter üìù‚û°Ô∏èüìÑ")

st.sidebar.header("Controls")
ref_file = st.sidebar.file_uploader("Reference DOCX", type=["docx"])
xml_files = st.sidebar.file_uploader("XML Files", type=["xml"], accept_multiple_files=True)

if st.sidebar.button("Reset"):
    st.experimental_rerun()

# Helper to preserve whitespace in runs
def add_preserved_run(para, text, highlight=False):
    run = para.add_run(text)
    # Preserve whitespace
    rPr = run._r.get_or_add_rPr()
    rPr.set(qn('xml:space'), 'preserve')
    if highlight:
        run.font.highlight_color = 7
    return run

if st.sidebar.button("Run Highlighting"):
    if not ref_file or not xml_files:
        st.sidebar.error("Please upload both a reference DOCX and at least one XML file.")
    else:
        # Load blank template bytes
        blank_bytes = open(TEMPLATE_PATH, 'rb').read()

        # Extract reference strings
        from docx import Document as DocLoader
        def extract_reference_strings(doc_bytes):
            doc = DocLoader(BytesIO(doc_bytes))
            strings = []
            for para in doc.paragraphs:
                text = para.text.strip()
                if not text:
                    continue
                style = getattr(para.style, 'name', '').lower()
                has_num = para._p.find(qn('w:numPr')) is not None
                has_bold = any(run.bold for run in para.runs if run.text.strip())
                if has_bold or has_num or 'list paragraph' in style or 'bullet' in style or text.startswith(('‚Ä¢','-','*')):
                    cleaned = text.lstrip('‚Ä¢-‚Äì*0123456789. )').strip()
                    if cleaned:
                        strings.append(cleaned)
            # sort longest first
            return sorted(strings, key=len, reverse=True)

        ref_strings = extract_reference_strings(ref_file.read())
        results = []
        st.write("## Processing files‚Ä¶")

        for xml in xml_files:
            xml_text = xml.read().decode('utf-8')
            lines = xml_text.split('\n')  # preserve empty lines

            # Initialize doc from blank
            doc = Document(BytesIO(blank_bytes))
            # Clear template content
            body = doc._body._element
            for child in list(body):
                body.remove(child)

            # Write each line, preserving whitespace
            for line in lines:
                para = doc.add_paragraph()
                idx = 0
                length = len(line)
                while idx < length:
                    next_pos = length
                    next_ref = None
                    for ref in ref_strings:
                        pos = line.find(ref, idx)
                        if pos != -1 and pos < next_pos:
                            next_pos, next_ref = pos, ref
                    if next_ref:
                        if next_pos > idx:
                            add_preserved_run(para, line[idx:next_pos])
                        add_preserved_run(para, next_ref, highlight=True)
                        idx = next_pos + len(next_ref)
                    else:
                        add_preserved_run(para, line[idx:])
                        break
                # add explicit line break if there is at least one run
                if para.runs:
                    br = OxmlElement('w:br')
                    para.runs[-1]._r.addnext(br)
                br = OxmlElement('w:br')
                para.runs[-1]._r.addnext(br)

            # Cleanup unwanted paragraphs
            for para in list(doc.paragraphs):
                txt = para.text.strip().lower()
                if txt.isdigit() or 'generated by python-docx' in txt:
                    para._element.getparent().remove(para._element)
            # Remove paragraphs without highlights
            for para in list(doc.paragraphs):
                if not any(run.font.highlight_color for run in para.runs):
                    para._element.getparent().remove(para._element)

            # Save to buffer
            out_buf = BytesIO()
            doc.save(out_buf)
            out_buf.seek(0)
            filename = os.path.splitext(xml.name)[0] + '_highlighted.docx'
            results.append((filename, out_buf))

        st.success("Batch highlighting complete!")
        st.write("## Download Results")
        for name, buf in results:
            st.download_button(label=f"Download {name}", data=buf, file_name=name,
                               mime='application/vnd.openxmlformats-officedocument.wordprocessingml.document')

st.sidebar.markdown("---")
st.sidebar.write("Built with Streamlit and python-docx.")
